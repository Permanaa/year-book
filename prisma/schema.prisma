// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// model Example {
//     id String @id @default(cuid())
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createAlumni  Alumni[]
    createClass   Class[]
    createStudent Student[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Alumni {
    id              String      @id @default(cuid())
    generation      Int
    graduation_year String
    school_year     String
    slug            String      @unique
    status          Status      @default(SUBMITTED)
    class           Class[]
    student         Student[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    createdBy       String
    user            User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Major {
    id              String      @id @default(cuid())
    name            String
    short_name      String      @unique
    class           Class[]
    student         Student[]
}

model Class {
    id              String      @id @default(cuid())
    name            String
    slug            String      @unique
    status          Status      @default(SUBMITTED)
    majorId         String
    alumniId        String
    major           Major       @relation(fields: [majorId], references: [id], onDelete: Cascade)
    alumni          Alumni      @relation(fields: [alumniId], references: [id], onDelete: Cascade)
    student         Student[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    createdBy       String
    user            User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Student {
    id              String      @id @default(cuid())
    name            String
    address         String?
    date_of_birth   DateTime?   @db.Date
    place_of_birth  String?
    image           String?
    words           String?
    instagram       String?
    whatsapp        String?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    status          Status      @default(SUBMITTED)
    alumniId        String
    majorId         String
    classId         String
    createdBy       String
    alumni          Alumni      @relation(fields: [alumniId], references: [id], onDelete: Cascade)
    major           Major       @relation(fields: [majorId], references: [id], onDelete: Cascade)
    class           Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
    user            User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

enum Status {
    SUBMITTED
    PUBLISHED
}
